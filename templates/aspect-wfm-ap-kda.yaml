---
AWSTemplateFormatVersion: '2010-09-09'
Description: Aspect WFM Agent Productivity Report Generator integration (Workload
  Template) for Amazon Connect Quick Start (qs-)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Aspect WFM Configuration
      Parameters:
      - KdaApplicationName
      - AspectApDataS3Prefix
    ParameterLabels:
      KdaApplicationName:
        default: Aspect Kinesis Application Name
      AspectApDataS3Prefix:
        default: Aspect WFM Report Prefix
Parameters:
  KdaApplicationName:
    Type: String
    Default: aspect-wfm-ap
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    Description: Enter the name of the Kinesis Data Analytics application to create.  This
      string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).  If you have multiple Amazon
      Connect instances in your AWS account, you will need to create a Kinesis Data
      Analytics application for each Amazon Connect instance and give each application
      a unique name.  The Kinesis Firehose Data Delivery stream that writes agent
      status reports to S3 is named based on the application name.  The name of the
      Firehose stream determines the filenames of agent productivity report files
      written to S3.  By default, WFM Adapter expects the report files to be named
      based on an application name of "aspect-wfm-ap". If you specify a different
      application name, be sure to update the WFM Adapter configuration for the corresponding
      data source to match your application name, in the Firehose Report Mapping data
      source parameter.  Consult the WFM Adapter help for more information.
  AspectApDataS3Prefix:
    Type: String
    Default: OUTPUT/
    Description: Enter the prefix for Aspect WFM Agent Productivity reports written
      to S3.  You should configure the corresponding WFM Adapter data source to match
      this value, in the Firehose Report Root Path data source parameter.
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  AgentEventStreamArn:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
  KinesisDataAnalyticsApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName:
        Fn::Sub: ${KdaApplicationName}
      ApplicationDescription: Aspect WFM Agent Productivity Report Generator
      ApplicationCode: |
        CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM"
          ("AWSAccountId" char(12),
          "Username" varchar(256),
          "AHGLevel1" varchar(256),
          "AHGLevel2" varchar(256),
          "AHGLevel3" varchar(256),
          "AHGLevel4" varchar(256),
          "AHGLevel5" varchar(256),
          "EventTimestamp" timestamp,
          "StateName" varchar(256),
          "ContactState" varchar(256),
          "StateType" char(1));

        CREATE OR REPLACE STREAM "TEMP_SQL_STREAM"
          ("AWSAccountId" char(12),
          "Username" varchar(256),
          "AHGLevel1" varchar(256),
          "AHGLevel2" varchar(256),
          "AHGLevel3" varchar(256),
          "AHGLevel4" varchar(256),
          "AHGLevel5" varchar(256),
          "EventTimestamp" timestamp,
          "StateName" varchar(256),
          "ContactState" varchar(256),
          "StateType" char(1));

        CREATE OR REPLACE PUMP "TEMP_PUMP" AS
           INSERT INTO TEMP_SQL_STREAM
               SELECT STREAM a."AWSAccountId", a."casUsername", a."casAhgL1Name", a."casAhgL2Name", a."casAhgL3Name", a."casAhgL4Name", a."casAhgL5Name", a."EventTimestamp", a."casStateName", a."casContactState", b."StateType"
               FROM SOURCE_SQL_STREAM_001 AS a
               LEFT OUTER JOIN AGENT_STATUS_INFO AS b
               ON a."casStateName" = b."StateName"
               WHERE a."casUsername" IS NOT NULL;

        CREATE OR REPLACE PUMP "STREAM_PUMP" AS
           INSERT INTO DESTINATION_SQL_STREAM
              SELECT STREAM "AWSAccountId", "Username", "AHGLevel1", "AHGLevel2", "AHGLevel3", "AHGLevel4", "AHGLevel5", "EventTimestamp", "StateName", "ContactState", COALESCE("StateType", '1')
              FROM TEMP_SQL_STREAM
              WINDOW W1 AS (PARTITION BY "AWSAccountId" RANGE INTERVAL '15' MINUTE PRECEDING);
      Inputs:
      - NamePrefix: SOURCE_SQL_STREAM
        InputSchema:
          RecordColumns:
          - Name: AWSAccountId
            SqlType: CHAR(12)
            Mapping: $.AWSAccountId
          - Name: casStateName
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.AgentStatus.Name
          - Name: casAhgL1Name
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Configuration.AgentHierarchyGroups.Level1.Name
          - Name: casAhgL2Name
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Configuration.AgentHierarchyGroups.Level2.Name
          - Name: casAhgL3Name
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Configuration.AgentHierarchyGroups.Level3.Name
          - Name: casAhgL4Name
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Configuration.AgentHierarchyGroups.Level4.Name
          - Name: casAhgL5Name
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Configuration.AgentHierarchyGroups.Level5.Name
          - Name: casUsername
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Configuration.Username
          - Name: casContactState
            SqlType: VARCHAR(256)
            Mapping: $.CurrentAgentSnapshot.Contacts[0:].State
          - Name: EventTimestamp
            SqlType: TIMESTAMP
            Mapping: $.EventTimestamp
          - Name: EventType
            SqlType: VARCHAR(64)
            Mapping: $.EventType
          - Name: Version
            SqlType: VARCHAR(10)
            Mapping: $.Version
          RecordFormat:
            RecordFormatType: JSON
            MappingParameters:
              JSONMappingParameters:
                RecordRowPath: $
        KinesisStreamsInput:
          ResourceARN:
            Ref: AgentEventStreamArn
          RoleARN:
            Fn::GetAtt: KinesisAnalyticsAppRole.Arn
  KinesisAnalyticsS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: kinesisanalytics.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  KinesisAnalyticsAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: kinesisanalytics.amazonaws.com
          Action: sts:AssumeRole
      Path: /service-role/
      Policies:
      - PolicyName: ReadInputKinesis
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kinesis:DescribeStream
            - kinesis:GetShardIterator
            - kinesis:GetRecords
            Resource:
            - Ref: AgentEventStreamArn
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - Fn::Sub: arn:aws:s3:::${S3Bucket}/ASPECT_AGENT_STATUS_INFO.csv
      - PolicyName: WriteOutputFirehose
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - firehose:DescribeDeliveryStream
            - firehose:PutRecord
            - firehose:PutRecordBatch
            Resource:
            - Fn::GetAtt: OutputKinesisFirehose.Arn
  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
    DependsOn: S3Bucket
  FirehoseGluePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: glue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - glue:GetTableVersions
          Resource:
          - '*'
      Roles:
      - Ref: FirehoseRole
  FirehoseS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:AbortMultipartUpload
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:PutObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${S3Bucket}
          - Fn::Sub: arn:aws:s3:::${S3Bucket}/${AspectApDataS3Prefix}*
      Roles:
      - Ref: FirehoseRole
  FirehoseLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: logs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:PutLogEvents
          - logs:CreateLogStream
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/${OutputKinesisFirehose}:log-stream:*
      Roles:
      - Ref: FirehoseRole
  KinesisDataAnalyticsApplicationOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    DependsOn: KinesisDataAnalyticsApplication
    Properties:
      ApplicationName:
        Ref: KinesisDataAnalyticsApplication
      Output:
        Name: DESTINATION_SQL_STREAM
        DestinationSchema:
          RecordFormatType: CSV
        KinesisFirehoseOutput:
          ResourceARN:
            Fn::GetAtt: OutputKinesisFirehose.Arn
          RoleARN:
            Fn::GetAtt: KinesisAnalyticsAppRole.Arn
  OutputKinesisFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName:
        Fn::Sub: ${KdaApplicationName}-kda-to-s3
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt: S3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        CompressionFormat: UNCOMPRESSED
        Prefix:
          Fn::Sub: ${AspectApDataS3Prefix}
        RoleARN:
          Fn::GetAtt: FirehoseRole.Arn
  ApplicationReferenceDataSource:
    Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource
    DependsOn: KinesisDataAnalyticsApplicationOutputs
    Properties:
      ApplicationName:
        Ref: KinesisDataAnalyticsApplication
      ReferenceDataSource:
        TableName: AGENT_STATUS_INFO
        ReferenceSchema:
          RecordColumns:
          - Name: StateName
            SqlType: VARCHAR(128)
          - Name: StateType
            SqlType: CHAR(1)
          RecordFormat:
            RecordFormatType: CSV
            MappingParameters:
              CSVMappingParameters:
                RecordColumnDelimiter: ','
                RecordRowDelimiter: '

                  '
        S3ReferenceDataSource:
          BucketARN:
            Fn::GetAtt: S3Bucket.Arn
          FileKey: ASPECT_AGENT_STATUS_INFO.csv
          ReferenceRoleARN:
            Fn::GetAtt: KinesisAnalyticsS3Role.Arn
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CreateLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: CheckKdaStatus
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kinesisanalytics:DescribeApplication
            Resource:
            - Fn::Sub: arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${KdaApplicationName}
      - PolicyName: WriteToFirehose
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - firehose:PutRecord
            Resource:
            - Fn::GetAtt: OutputKinesisFirehose.Arn
  FirehoseUpdateLambda:
    Type: AWS::Lambda::Function
    DependsOn:
    - KinesisDataAnalyticsApplication
    - OutputKinesisFirehose
    Properties:
      FunctionName:
        Fn::Sub: ${KdaApplicationName}-lambda
      Description: Periodically write to Agent Productivity firehose stream to ensure
        that files are created
      Code:
        S3Bucket: aws-quickstart
        S3Key: connect-integration-aspect-wfm/functions/packages/agent-productivity/lambda.zip
      Environment:
        Variables:
          firehose_stream_name:
            Ref: OutputKinesisFirehose
          kda_application_name:
            Ref: KinesisDataAnalyticsApplication
      Handler: index.lambda_handler
      Runtime: python3.6
      Role:
        Fn::GetAtt: LambdaRole.Arn
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: FirehoseUpdateLambda
      Description: Official version of Firehose Update Lambda
  ScheduledEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Call Agent Productivity Firehose update Lambda every 5 minutes
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt: FirehoseUpdateLambda.Arn
        Id:
          Fn::GetAtt: LambdaVersion.Version
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: FirehoseUpdateLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: ScheduledEvent.Arn
Outputs:
  ApplicationPhysicalResourceId:
    Value:
      Ref: KinesisDataAnalyticsApplication
...
